





这次拷贝是写完了夜间模式之后，但是夜间模式是通过更改系统亮度写的
现在打算更改为覆盖一层模板



package com.example.gongzhiyao.twonote03;


import android.app.Activity;
import android.app.AlertDialog;
import android.app.PendingIntent;
import android.content.ContentResolver;
import android.content.ContentUris;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.res.Resources;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.graphics.Matrix;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Environment;
import android.provider.DocumentsContract;
import android.provider.MediaStore;
import android.provider.Settings;
import android.support.v4.view.MenuItemCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarActivity;
import android.support.v7.app.ActionBarDrawerToggle;
import android.os.Bundle;
import android.support.v7.widget.SearchView;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.CompoundButton;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.SimpleCursorAdapter;
import android.widget.Switch;
import android.widget.TextView;
import android.widget.Toast;

import com.example.gongzhiyao.twonote03.Edit_log.Edit_Text;
import com.example.gongzhiyao.twonote03.Search_log.Search_Result;
import com.example.gongzhiyao.twonote03.Service.infoService;
import com.example.gongzhiyao.twonote03.Text_Forever_scroll.ScrollForeverTextView;
import com.example.gongzhiyao.twonote03.database.MyDB;
import com.handmark.pulltorefresh.library.PullToRefreshBase;
import com.handmark.pulltorefresh.library.PullToRefreshListView;

import net.tsz.afinal.FinalBitmap;

import java.io.File;
import java.io.FileNotFoundException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.zip.Inflater;

public class MainActivity extends ActionBarActivity implements View.OnClickListener {
    //声明相关变量
    private Toolbar toolbar;
    private DrawerLayout mDrawerLayout;
    private ActionBarDrawerToggle mDrawerToggle;
        private Adapter adapter1;
    private Button mbSetting;

    private Button mbAdd;
    private MyDB db;
    private SQLiteDatabase dbwrite, dbRead;
//    private SimpleCursorAdapter adapter;
//    private ListView lv;
    private PullToRefreshListView lv;
    public static final int Request_edit_code = 1;
    public static final int Request_add_code = 2;
    public static final String TAG = "Main";
    private RelativeLayout slider_view;
    private LinearLayout root_View;
    private Button mbRecent_log, mbRecord_Sound;
    private int delete_id;
    private String delete_name,delete_passwd,delete_content;
    private Cursor c;
    private SharedPreferences sp;
//    private Button mblack;
    private Switch night_switch;
    private int light;
    private boolean is_night_on;

/****************************************************************************************************/



    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        findViews(); //获取控件

        sp=getPreferences(MODE_PRIVATE);
        try {
           is_night_on = sp.getBoolean("night_light", false);
            Log.i(TAG,"此时的开关是"+is_night_on);
        }catch (Exception e){

            sp.edit().putBoolean("night_light",false).commit();
            Log.i(TAG, "异常发生了");
        }
        Log.i(TAG,"此时的开关是"+is_night_on);
        if(is_night_on==true){
            night_switch.setChecked(true);
            light=getSystemBrightness(MainActivity.this);
            Log.i(TAG, "此时的系统亮度是" + light);
            sp.edit().putInt("light", light).commit();
            boolean autobrightness=isAutoBrightness(getContentResolver());
            sp.edit().putBoolean("isAuto",autobrightness).commit();
            Log.i(TAG, "此时的自动调节是" + autobrightness);


            if(autobrightness==true){
                closeAutoBrightness(this);
                Log.i(TAG,"自动亮度调节已关闭");
            }

            light=10;
            saveBrightness(getContentResolver(), light);
            /**
             * 在这里写下asycntask的实例
             * 夜间模式可以写到doinbackground里面
             * 同样后面的夜间模式也可以写到里面
             * 除此之外，在退出时，应还原屏幕设置
             *
             *
             *
             *
             * 但是一个更好的办法是
             * 添加一层模板，覆盖Activity类似于搜狗浏览器
             *
             *
             *
             */
        }

        bindListener();
        try {
            Intent i = getIntent();
            if (i != null) {
                int op = i.getIntExtra("op", -1);
                delete_id=i.getIntExtra("id",-1);
                delete_name=i.getStringExtra("name");
                delete_passwd=i.getStringExtra("passwd");
                delete_content=i.getStringExtra("content");
                if (op==1&&delete_passwd.equals("")) {
                    AlertDialog.Builder dialog = new AlertDialog.Builder(this);
                    dialog.setTitle("提醒");
                    dialog.setMessage("您确定要删除" + delete_name + ".txt吗？");
                    dialog.setNegativeButton("取消", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            finish();
                        }
                    });
                    dialog.setPositiveButton("确定", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            String sq="delete from notes where _id=?";
                            dbwrite.execSQL(sq,new String[]{""+delete_id});
                            deleteFile(delete_content);
                            Toast.makeText(getApplicationContext(),"删除成功",Toast.LENGTH_SHORT).show();
                                finish();
                        }
                    });


                    dialog.create().show();

                }
                else if(op==1&&!delete_passwd.equals("")){
                    AlertDialog.Builder dialog=new AlertDialog.Builder(MainActivity.this);
                    dialog.setTitle("删除需要权限!");
                    LayoutInflater li=LayoutInflater.from(getApplicationContext());
                    View edit=li.inflate(R.layout.edit_passwd, null);
                    final EditText et_passwd= (EditText) edit.findViewById(R.id.ed_passwd);
                    TextView tv_passwd= (TextView) edit.findViewById(R.id.tv_passwd);
                    /**
                     * 这一句非常重要不能忘记
                     */
                    dialog.setView(edit);
                    dialog.setNegativeButton("取消", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            finish();
                        }
                    });
                    dialog.setPositiveButton("确定", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            String input_passwd=et_passwd.getText().toString();
                            if(delete_passwd.equals(input_passwd)){
                                String sq="delete from notes where _id=?";
                                dbwrite.execSQL(sq,new String[]{""+delete_id});
                                Toast.makeText(getApplicationContext(),"删除成功",Toast.LENGTH_SHORT).show();
                                /**
                                 * 把内部文件删除
                                 */
                                deleteFile(delete_content);
                            }else {
                                Toast.makeText(getApplicationContext(),"密码输入错误,获取权限失败！",Toast.LENGTH_SHORT).show();
                            }
                            finish();
                        }
                    });
                    dialog.create().show();

                }
                else if(op==2){
                    //在这里要创建密码
                    AlertDialog.Builder dialog=new AlertDialog.Builder(this);
                    dialog.setTitle("设置密码");
                    LayoutInflater li=LayoutInflater.from(getApplicationContext());
                    View edit=li.inflate(R.layout.edit_passwd, null);
                    final EditText et_passwd= (EditText) edit.findViewById(R.id.ed_passwd);
                    TextView tv_passwd= (TextView) edit.findViewById(R.id.tv_passwd);
                    /**
                     * 这一句非常重要不能忘记
                     */
                    dialog.setView(edit);//
                    dialog.setNegativeButton("取消", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            finish();
                        }
                    });
                    dialog.setPositiveButton("确定", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            String passwd = et_passwd.getText().toString();
                            if(passwd.equals("")){
                                Toast.makeText(getApplicationContext(),"密码设置失败,密码不能为空!",Toast.LENGTH_SHORT).show();

                            }else{
                            Log.i(TAG, "获得的密码是" + passwd);
                            String sq = "update notes set passwd=? where _id=?";
                            dbwrite.execSQL(sq, new String[]{passwd, "" + delete_id});
                            Toast.makeText(getApplicationContext(), "密码设置成功", Toast.LENGTH_SHORT).show();
                            finish();
                            }
                        }
                    });
                    dialog.create().show();



                }
                else if(op==3){
                    Log.i(TAG,"需要清除密码");
                    /**
                     * 清除密码暂时不写，先把查看需要密码和删除需要密码写了
                     *
                     * 现在开始写取消密码
                     */

                    AlertDialog.Builder dialog=new AlertDialog.Builder(this);
                    dialog.setTitle("是否要取消密码？");
                    LayoutInflater li=LayoutInflater.from(getApplicationContext());
                    View edit=li.inflate(R.layout.edit_passwd, null);
                    final EditText et_passwd= (EditText) edit.findViewById(R.id.ed_passwd);
                    TextView tv_passwd= (TextView) edit.findViewById(R.id.tv_passwd);
                    /**
                     * 这一句非常重要不能忘记
                     */
                    dialog.setView(edit);//
                    dialog.setNegativeButton("取消", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            finish();
                        }
                    });
                    dialog.setPositiveButton("确定", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            String passwd = et_passwd.getText().toString();
                          if(delete_passwd.equals(passwd)){
                              String sq="update notes set passwd=? where _id=?";
                              dbwrite.execSQL(sq,new String[]{"",""+delete_id});
                              Toast.makeText(getApplicationContext(),"密码已取消",Toast.LENGTH_SHORT).show();
                          }else{
                              Toast.makeText(getApplicationContext(),"密码输入错误",Toast.LENGTH_SHORT).show();
                          }
                            finish();
                        }
                    });
                    dialog.create().show();




                }
            }
        } catch (Exception e) {
            Log.i(TAG, "有异常发生");
        }
        slider_view = (RelativeLayout) findViewById(R.id.slider_content);

        db = new MyDB(this);
        dbRead = db.getReadableDatabase();
        dbwrite = db.getWritableDatabase();


/*************************************************************************************************************************************************************************/
/********************长按上下文菜单也在这******************************************************************************************************************************************************************/
        /*******这一部分是下拉列表的刷新，里面有部分网络通信，没有写******/

        //此处缺少一个布局文件，用于显示Listview的Item
//        adapter = new SimpleCursorAdapter(this, R.layout.list_cell_item, null, new String[]{"name", "content", "date"}, new int[]{R.id.tv_title, R.id.tv_content, R.id.tv_date});
//        adapter = new SimpleCursorAdapter(this, R.layout.list_cell_item, null, new String[]{"name", "date"}, new int[]{R.id.tv_title, R.id.tv_date});
//        Cursor c=dbRead.query("notes",null,null,null,null,null,null);
        /**
         * 更改前的adapter
         */
       // adapter = new SimpleCursorAdapter(this, R.layout.list_cell_item, null, new String[]{"name", "summary", "date"}, new int[]{R.id.tv_title, R.id.tv_content, R.id.tv_date});

        Cursor cc=dbRead.query("notes",null,null,null,null,null,null);
        adapter1=new Adapter(this,R.layout.list_cell_item,cc);


        lv.setAdapter(adapter1);
        //lv.setAdapter(adapter);


        lv.setOnItemClickListener(new AdapterView.OnItemClickListener() {//点击一个Item时，查询数据库，发送消息
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
               // c = adapter.getCursor();
                c=adapter1.getCursor();
                c.moveToPosition(position - 1);
                final String passwd=c.getString(c.getColumnIndex("passwd"));
                final String titie=c.getString(c.getColumnIndex("name"));
                final String content=c.getString(c.getColumnIndex("content"));
                final String date=c.getString(c.getColumnIndex("date"));
                final int id1=c.getInt(c.getColumnIndex("_id"));

                Log.i(TAG,"此时的密码是"+passwd);
                if(!passwd.equals("")){
                     AlertDialog.Builder dialog=new AlertDialog.Builder(MainActivity.this);
                    dialog.setTitle("文件已加密!");
                    LayoutInflater li=LayoutInflater.from(getApplicationContext());
                    View edit=li.inflate(R.layout.edit_passwd, null);
                    final EditText et_passwd= (EditText) edit.findViewById(R.id.ed_passwd);
                    TextView tv_passwd= (TextView) edit.findViewById(R.id.tv_passwd);
                    /**
                     * 这一句非常重要不能忘记
                     */
                    dialog.setView(edit);
                    dialog.setNegativeButton("取消", null);
                    dialog.setPositiveButton("确定", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            String input_passwd=et_passwd.getText().toString();
                            if(passwd.equals(input_passwd)){

                                Intent i = new Intent(MainActivity.this, Edit_Text.class);
                                i.putExtra(Edit_Text.Title, titie);
                                i.putExtra(Edit_Text.Content, content);
                                Log.i(TAG,"要发送的content是"+content);
                                i.putExtra(Edit_Text.Date, date);
                                i.putExtra(Edit_Text.Id, id1);
                                i.putExtra(Edit_Text.passwd,passwd);
                                startActivityForResult(i, Request_edit_code);
                            }else {
                                Toast.makeText(getApplicationContext(),"密码输入错误",Toast.LENGTH_SHORT).show();
                            }
                        }
                    });
                    dialog.create().show();

                }else {
                    Intent i = new Intent(MainActivity.this, Edit_Text.class);
                    i.putExtra(Edit_Text.Title, c.getString(c.getColumnIndex("name")));
                    i.putExtra(Edit_Text.Content, c.getString(c.getColumnIndex("content")));
                    Log.i(TAG, "要发送的content是" + c.getString(c.getColumnIndex("content")));
                    i.putExtra(Edit_Text.Date, c.getString(c.getColumnIndex("date")));
                    i.putExtra(Edit_Text.Id, c.getInt(c.getColumnIndex("_id")));
                    i.putExtra(Edit_Text.passwd,passwd);
                    startActivityForResult(i, Request_edit_code);
                }
            }
        });


        ListView actualListView = lv.getRefreshableView();

        actualListView.setOnItemLongClickListener(longClick);

        lv.setOnRefreshListener(new PullToRefreshBase.OnRefreshListener2<ListView>() {
                                    @Override
                                    public void onPullDownToRefresh(final PullToRefreshBase<ListView> refreshView) {
                                        lv.getLoadingLayoutProxy().setRefreshingLabel("正在刷新");
                                        lv.getLoadingLayoutProxy().setPullLabel("下拉刷新数据");
                                        lv.getLoadingLayoutProxy().setReleaseLabel("释放开始刷新");
                                        //模拟加载数据线程休息3秒
                                        new AsyncTask<Void, Void, Void>() {
                                            @Override
                                            protected Void doInBackground(Void... params) {
                                                try {
                                                    Thread.sleep(1000);//模拟网络通信 ，在这里休眠了一秒


                                                } catch (InterruptedException e) {
                                                    e.printStackTrace();
                                                }

                                                //这里是后台做的事
                                                //在背后连接服务器刷新数据

                                                return null;
                                            }

                                            @Override
                                            protected void onPostExecute(Void result) {
                                                super.onPostExecute(result);
                                                //完成对下拉刷新ListView的更新操作
                                                /**
                                                 *
                                                 * 这个打算先不写
                                                 */
//                                                adapter1.notifyDataSetChanged();
                                                //将下拉视图收起
                                                lv.onRefreshComplete();
                                            }
                                        }.execute();
                                    }


                                    @Override
                                    public void onPullUpToRefresh(PullToRefreshBase<ListView> refreshView) {
                                        lv.getLoadingLayoutProxy().setRefreshingLabel("正在加载");
                                        lv.getLoadingLayoutProxy().setPullLabel("上拉加载更多");
                                        lv.getLoadingLayoutProxy().setReleaseLabel("释放开始加载");
                                        //模拟加载数据线程休息3秒
                                        new AsyncTask<Void, Void, Void>() {
                                            @Override
                                            protected Void doInBackground(Void... params) {
                                                try {
                                                    Thread.sleep(3000);//数据写在这里
//                                                    data.add("更多数据1");
//                                                    data.add("更多数据2");
//                                                    data.add("更多数据3");
                                                } catch (InterruptedException e) {
                                                    e.printStackTrace();
                                                }
                                                return null;
                                            }

                                            @Override
                                            protected void onPostExecute(Void result) {
                                                super.onPostExecute(result);
                                                //完成对下拉刷新ListView的更新操作
//                                                adapter1.notifyDataSetChanged();
                                                //将下拉视图收起
                                                lv.onRefreshComplete();
                                            }
                                        }.execute();

                                    }
                                }

        );
/****************************************************************************************************************************/
/*************************************************************************************************************************************/


        refreshList();


//在这里写主布局

/************************************************************************************************************
 /******************************************************************************************************/
        /**************这里是Toolbar的设置***************/

        toolbar.setTitle("");//设置Toolbar标题
        toolbar.setTitleTextColor(Color.parseColor("#ffffff")); //设置标题颜色

        setSupportActionBar(toolbar);

        //        toolbar.setOnMenuItemClickListener(new Toolbar.OnMenuItemClickListener() {
//            @Override
//            public boolean onMenuItemClick(MenuItem item) {
//                switch (item.getItemId()) {
//                    case R.id.ab_search:
//
//
//                        Toast.makeText(getApplicationContext(),"点击了搜索按钮",Toast.LENGTH_SHORT).show();
//                        break;
//
//                }
//                return true;
//            }
//        });
        getSupportActionBar().setHomeButtonEnabled(true); //设置返回键可用

        getSupportActionBar().setDisplayHomeAsUpEnabled(true);

        getSupportActionBar().setDisplayShowTitleEnabled(false);
        //创建返回键，并实现打开关/闭监听
        mDrawerToggle = new

                ActionBarDrawerToggle(this, mDrawerLayout, toolbar, R.string.open, R.string.close) {
                    @Override
                    public void onDrawerOpened(View drawerView) {//抽屉打开后，做的操作
                        super.onDrawerOpened(drawerView);
                        Log.i(TAG, "抽屉已打开");
                        slider_view.setClickable(true);
                    }

                    @Override
                    public void onDrawerClosed(View drawerView) {//抽屉关闭后做的操作
                        super.onDrawerClosed(drawerView);
//                mAnimationDrawable.start();
                    }
                }

        ;
        mDrawerToggle.syncState();
        mDrawerLayout.setDrawerListener(mDrawerToggle);


    }//这是oncreate的最后

    /*************************************************************************************************/

    private void bindListener() {
        mbAdd.setOnClickListener(this);
        mbSetting.setOnClickListener(this);
        mbRecent_log.setOnClickListener(this);
        mbAdd.setOnClickListener(this);
        mbRecord_Sound.setOnClickListener(this);
        night_switch.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                    if(isChecked){

                       sp.edit().putBoolean("night_light",true).commit();
                        Log.i(TAG,"开关打开");
                        night_switch.setChecked(true);

                        light=getSystemBrightness(MainActivity.this);
                        Log.i(TAG, "此时的系统亮度是" + light);
                        sp.edit().putInt("light", light).commit();
                        boolean autobrightness=isAutoBrightness(getContentResolver());
                        sp.edit().putBoolean("isAuto",autobrightness).commit();
                        Log.i(TAG, "此时的自动调节是" + autobrightness);
                        if(autobrightness==true){
                            closeAutoBrightness(MainActivity.this);
                            Log.i(TAG,"自动亮度调节已关闭");
                        }

                        light=10;
                        saveBrightness(getContentResolver(), light);
                    }else {
                        /**
                         * 在这里要还原设置操作
                         */
                    night_switch.setChecked(false);
                        Log.i(TAG,"开关关闭");
                    sp.edit().putBoolean("night_light",false).commit();
                        boolean auto=sp.getBoolean("isAuto", false);
                        if(auto==true){
                            openAutoBrightness(MainActivity.this);
                        }else{
                            int light_pre=sp.getInt("light",255);
                            saveBrightness(getContentResolver(),light_pre);
                        }



                    }
            }
        });
//        mblack.setOnClickListener(this);
    }

    /***********************************************************************************************************/
    private void findViews() {

        mbRecent_log = (Button) findViewById(R.id.btn_recent_log);
        night_switch= (Switch) findViewById(R.id.swich_night);
        root_View = (LinearLayout) findViewById(R.id.root_view);

        lv = (PullToRefreshListView) findViewById(R.id.lv);
        mbAdd = (Button) findViewById(R.id.btn_add);
        mbAdd = (Button) findViewById(R.id.btn_add);
        mbSetting = (Button) findViewById(R.id.btn_setting);
        toolbar = (Toolbar) findViewById(R.id.tl_custom);
        mDrawerLayout = (DrawerLayout) findViewById(R.id.dl_left);
        mbRecent_log = (Button) findViewById(R.id.btn_recent_log);

//        mblack= (Button) findViewById(R.id.btn_black);
        mbRecord_Sound = (Button) findViewById(R.id.btn_record_sound_log);
    }


    private TextView tv;

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        switch (requestCode) {


            case Request_edit_code:
            case Request_add_code: //无论是新建还是修改都要刷新一下列表

                if (resultCode == Activity.RESULT_OK) {
                    //如果是add操作，就刷.................................新列表
                    Log.i(TAG, "刷新列表成功");


                }

                break;
        }
    }

    @Override
    protected void onResume() {
        super.onResume();
        refreshList();
        Log.i(TAG, "主界面恢复");
//        mDrawerLayout.closeDrawer(slider_view);//这就是代码关闭抽屉
    }

    @Override
    protected void onPause() {
        super.onPause();
        Log.i(TAG, "主界面暂停");
//        mDrawerLayout.closeDrawer(slider_view);//这就是代码关闭抽屉

    }

    @Override
    protected void onDestroy() {
        Log.i(TAG, "主界面销毁");
        super.onDestroy();
        dbRead.close();
        dbwrite.close();
    }

    @Override
    protected void onStart() {
        super.onStart();
        /**
         * 在这里启动服务
         */
        Log.i(TAG, "主界面启动");
        Intent i = new Intent(this, infoService.class);
        startService(i);


    }

    private void refreshList() {
//        Cursor c1 = dbRead.query("notes", null, null, null, null, null, null);
//        adapter1.changeCursor(c1);

        Cursor cc=dbRead.query("notes",null,null,null,null,null,null);
        adapter1=new Adapter(this,R.layout.list_cell_item,cc);
        lv.setAdapter(adapter1);
        adapter1.notifyDataSetChanged();
        Log.i(TAG, "刷新了一次列表");
    }

    /**********************
     * 监听器,左边界面的监听器也在里面
     *********************************************************************************/






    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.btn_setting:

                break;
            case R.id.btn_recent_log:
                mDrawerLayout.closeDrawer(slider_view);

                break;
            case R.id.btn_add:
                add_new_one();
                break;
            case R.id.btn_record_sound_log:
                Log.i(TAG, "点击了录音笔记");
                mDrawerLayout.closeDrawer(slider_view);//这就是代码关闭抽屉
                /**
                 * 在这里写一个线程，让抽屉延时关闭，把startActivity写到线程中
                 */
                new Thread() {
                    @Override
                    public void run() {
                        super.run();
                        try {
                            sleep(300);
                            startActivity(new Intent(MainActivity.this, Record_Sound_list.class));
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                }.start();


                break;




//            case R.id.swich_night:
//
//                /**
//                 * 夜间模式写在这里
//                 */
//
//               lml
//                break;


        }
    }

    private void add_new_one() {
        SimpleDateFormat f = new SimpleDateFormat("yyyy年MM月dd日    hh:mm:ss");
        String time = f.format(new Date());
        Intent i = new Intent(MainActivity.this, Edit_Text.class);
        i.putExtra(Edit_Text.Date, time);
        startActivityForResult(i, Request_add_code);
        Log.i(TAG, "获取到的时间是" + time);
    }

    /*********************************
     * 后面是自定义menu和menuitem监听器（SearchView）的设置
     ***************************************************************************/
    public static void setSearchViewOnClickListener(View v, View.OnClickListener listener) {
        if (v instanceof ViewGroup) {
            ViewGroup group = (ViewGroup) v;
            int count = group.getChildCount();
            for (int i = 0; i < count; i++) {
                View child = group.getChildAt(i);
                if (child instanceof LinearLayout || child instanceof RelativeLayout) {
                    setSearchViewOnClickListener(child, listener);
                }

                if (child instanceof TextView) {
                    TextView text = (TextView) child;
                    text.setFocusable(false);
                }
                child.setOnClickListener(listener);
            }
        }
    }

    final int Menu_Add_new_one = Menu.FIRST;
    final int Menu_My_collection = Menu.FIRST + 1;
    final int Menu_Sync = Menu.FIRST + 2;
    final int Menu_setting = Menu.FIRST + 3;
    MenuItem searchViewButton;

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_main, menu);
        menu.add(0, Menu_Add_new_one, 0, "新建");
        menu.add(0, Menu_My_collection, 0, "我的收藏");
        menu.add(0, Menu_Sync, 0, "同步");
        menu.add(0, Menu_setting, 0, "设置");

        searchViewButton = (MenuItem) menu.findItem(R.id.ab_search);

        SearchView searchView = (SearchView) MenuItemCompat.getActionView(searchViewButton);
        setSearchViewOnClickListener(searchView, new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                startActivity(new Intent(MainActivity.this, Search_Result.class));
            }
        });

        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {

            case Menu_Add_new_one:
                add_new_one();
//                Toast.makeText(getApplicationContext(),"点击了新建按钮",Toast.LENGTH_SHORT).show();
                break;
            case Menu_My_collection:
                Toast.makeText(getApplicationContext(), "点击了我的收藏", Toast.LENGTH_SHORT).show();
                break;
            case Menu_Sync:
                Toast.makeText(getApplicationContext(), "点击了同步", Toast.LENGTH_SHORT).show();
                break;
            case Menu_setting:
                Toast.makeText(getApplicationContext(), "点击了设置", Toast.LENGTH_SHORT).show();
                break;


        }


        return super.onOptionsItemSelected(item);
    }


    /**
     * 这里的代码是“再按一次退出”
     */

    long waitTime = 2000;
    long touchTime = 0;

    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if(event.getAction() == KeyEvent.ACTION_DOWN && KeyEvent.KEYCODE_BACK == keyCode) {
            long currentTime = System.currentTimeMillis();
            if((currentTime-touchTime)>=waitTime) {
                //让Toast的显示时间和等待时间相同
                Toast.makeText(this, "再按一次退出", Toast.LENGTH_SHORT).show();
                touchTime = currentTime;
            }else {
                finish();

                boolean auto=sp.getBoolean("isAuto", false);
                if(auto==true){
                    openAutoBrightness(this);
                }else{
                    int light_pre=sp.getInt("light",255);
                    saveBrightness(getContentResolver(),light_pre);
                }

            }
            return true;
        }
        return super.onKeyDown(keyCode, event);
    }


















/******************************************************************************************************************/
    /*********************************************************************************************/
    private AdapterView.OnItemLongClickListener longClick = new AdapterView.OnItemLongClickListener() {
        @Override
        public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {

            Intent i = new Intent(MainActivity.this, SelectPicPopupWindow.class);
            i.putExtra("position", position);
            Log.i(TAG,"即将传递过去的position是"+position);
            startActivity(i);

            Log.i(TAG, "长按操作已执行");

            return true;
        }
    };


//    public  String getAbsoluteImagePath(Uri uri)
//    {
//        // can post image
//        String [] proj={MediaStore.Images.Media.DATA};
//        Cursor cursor = managedQuery( uri,
//                proj,                 // Which columns to return
//                null,       // WHERE clause; which rows to return (all rows)
//                null,       // WHERE clause selection arguments (none)
//                null);                 // Order-by clause (ascending by name)
//
//        int column_index = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
//        cursor.moveToFirst();
//
//        return cursor.getString(column_index);
//    }

/***************************************************************************************/
    /***********这里是夜间模式的方法*******************************************************************/


    /**
     * 获取系统亮度
     * @param context
     * @return
     */
    public static int getSystemBrightness(Context context)
    {
        int brightnessValue = -1;
        try
        {
            brightnessValue = Settings.System.
                    getInt(context.getContentResolver(),Settings.System.SCREEN_BRIGHTNESS);
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        return brightnessValue;
    }

    /**
     * 检测是否开启的自动调节亮度
     * @param contentResolver
     * @return
     */
    public static boolean isAutoBrightness(ContentResolver contentResolver)
    {
        boolean autoBrightness = false;
        try
        {
            autoBrightness
                    = Settings.System.getInt(contentResolver ,
                    Settings.System.SCREEN_BRIGHTNESS_MODE)
                    == Settings.System.SCREEN_BRIGHTNESS_MODE_AUTOMATIC;
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        return autoBrightness;
    }

    /**
     * 关闭自动调节亮度
     * @param activity
     */
    public static void closeAutoBrightness(Activity activity)
    {
        Settings.System.putInt(activity.getContentResolver(),
                Settings.System.SCREEN_BRIGHTNESS_MODE,
                Settings.System.SCREEN_BRIGHTNESS_MODE_MANUAL);
    }

    /**
     * 打开亮度调节
     * @param activity
     */
    public static void openAutoBrightness(Activity activity)
    {
        Settings.System.putInt(activity.getContentResolver(),
                Settings.System.SCREEN_BRIGHTNESS_MODE,
                Settings.System.SCREEN_BRIGHTNESS_MODE_AUTOMATIC);
    }

    public static void saveBrightness
            (ContentResolver contentResolver , int brightnessValue)
    {
        Uri uri = android.provider.
                Settings.System.getUriFor(Settings.System.SCREEN_BRIGHTNESS);
        android.provider.Settings.System.putInt(contentResolver,
                Settings.System.SCREEN_BRIGHTNESS , brightnessValue);
        contentResolver.notifyChange(uri, null);
    }







}


/**
 * Created by 宫智耀 on 2016/4/24.
 */
class Adapter extends BaseAdapter {

    private Context context;
    private Cursor cursor;
    private LayoutInflater inflater;
    private int layout_num;
    public TextView tv_title;
    public TextView tv_content;
    public TextView tv_date;
    private FinalBitmap fb;
    private static final String TAG="Adapter";

    ImageView iv;

    public Adapter(Context context, int layout, Cursor c) {
//        super(context, layout, c, from, to);
        this.cursor = c;
        this.context = context;
        this.layout_num = layout;
        inflater = LayoutInflater.from(context);
        fb = FinalBitmap.create(context);//初始化FinalBitmap模块

    }



    public Cursor getCursor() {

        return cursor;
    }

    @Override
    public int getCount() {


        return cursor.getCount();
    }

    @Override
    public Object getItem(int position) {
        return position;
    }

    @Override
    public long getItemId(int position) {
        return position;
    }

    @Override
    public View getView(int position, View listlayout, ViewGroup parent) {
        Log.i(TAG,"getview被执行，position是"+position);
        cursor.moveToPosition(position);


        if (listlayout == null) {

            listlayout = inflater.inflate(layout_num, null);
//             tv_title= (ScrollForeverTextView) listlayout.findViewById(R.id.tv_title);

            listlayout.setTag(iv);


        }else {
            iv= (ImageView) listlayout.getTag();

        }
        tv_title = (TextView) listlayout.findViewById(R.id.tv_title);
        tv_content = (TextView) listlayout.findViewById(R.id.tv_content);
        tv_date = (TextView) listlayout.findViewById(R.id.tv_date);
        iv = (ImageView) listlayout.findViewById(R.id.iv_show);
        String title = cursor.getString(cursor.getColumnIndex("name"));
        String summary = cursor.getString(cursor.getColumnIndex("summary"));
        String date = cursor.getString(cursor.getColumnIndex("date"));
        String uri = cursor.getString(cursor.getColumnIndex("image"));
        String passwd=cursor.getString(cursor.getColumnIndex("passwd"));
        if(!passwd.equals("")){
            summary="内容已被加密";
            tv_title.setText(title);

            tv_content.setText(summary);
            tv_content.setTextColor(Color.RED);
            tv_date.setText(date);
           // fb.display(iv, uri);
            iv.setImageResource(R.drawable.lock);

        }else {
            tv_title.setText(title);

            tv_content.setText(summary);
            tv_date.setText(date);
            fb.display(iv, uri);
        }




        //notifyDataSetChanged();





        return listlayout;
    }

    public static Bitmap decodeBitmap(String path, int displayWidth, int displayHeight) {
        BitmapFactory.Options op = new BitmapFactory.Options();
        op.inJustDecodeBounds = true;

// op.inJustDecodeBounds = true;表示我们只读取Bitmap的宽高等信息，不读取像素。

        Bitmap bmp = BitmapFactory.decodeFile(path, op); // 获取尺寸信息
        System.out.println("此时的bmp是" + bmp);
// op.outWidth表示的是图像真实的宽度
// op.inSamplySize 表示的是缩小的比例
// op.inSamplySize = 4,表示缩小1/4的宽和高，1/16的像素，android认为设置为2是最快的。
// 获取比例大小
        int wRatio = (int) Math.ceil(op.outWidth / (float) displayWidth);
        int hRatio = (int) Math.ceil(op.outHeight / (float) displayHeight);
// 如果超出指定大小，则缩小相应的比例
        if (wRatio > 1 && hRatio > 1) {
            if (wRatio > hRatio) {
// 如果太宽，我们就缩小宽度到需要的大小，注意，高度就会变得更加的小。
                op.inSampleSize = wRatio;
            } else {
                op.inSampleSize = hRatio;
            }
        }
        op.inJustDecodeBounds = false;
        bmp = BitmapFactory.decodeFile(path, op);
// 从原Bitmap创建一个给定宽高的Bitmap
        return Bitmap.createScaledBitmap(bmp, displayWidth, displayHeight, true);
    }


    /**
     * 没有办法，这个应该放置到mainActivity 里面
     *
     * @param
     * @return
     */

    public static String getImageAbsolutePath(Activity context, Uri imageUri) {
        if (context == null || imageUri == null)
            return null;
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.KITKAT && DocumentsContract.isDocumentUri(context, imageUri)) {
            if (isExternalStorageDocument(imageUri)) {
                String docId = DocumentsContract.getDocumentId(imageUri);
                String[] split = docId.split(":");
                String type = split[0];
                if ("primary".equalsIgnoreCase(type)) {
                    return Environment.getExternalStorageDirectory() + "/" + split[1];
                }
            } else if (isDownloadsDocument(imageUri)) {
                String id = DocumentsContract.getDocumentId(imageUri);
                Uri contentUri = ContentUris.withAppendedId(Uri.parse("content://downloads/public_downloads"), Long.valueOf(id));
                return getDataColumn(context, contentUri, null, null);
            } else if (isMediaDocument(imageUri)) {
                String docId = DocumentsContract.getDocumentId(imageUri);
                String[] split = docId.split(":");
                String type = split[0];
                Uri contentUri = null;
                if ("image".equals(type)) {
                    contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
                } else if ("video".equals(type)) {
                    contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;
                } else if ("audio".equals(type)) {
                    contentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;
                }
                String selection = MediaStore.Images.Media._ID + "=?";
                String[] selectionArgs = new String[]{split[1]};
                return getDataColumn(context, contentUri, selection, selectionArgs);
            }
        } // MediaStore (and general)
        else if ("content".equalsIgnoreCase(imageUri.getScheme())) {
            // Return the remote address
            if (isGooglePhotosUri(imageUri))
                return imageUri.getLastPathSegment();
            return getDataColumn(context, imageUri, null, null);
        }
        // File
        else if ("file".equalsIgnoreCase(imageUri.getScheme())) {
            return imageUri.getPath();
        }
        return null;
    }

    public static String getDataColumn(Context context, Uri uri, String selection, String[] selectionArgs) {
        Cursor cursor = null;
        String column = MediaStore.Images.Media.DATA;
        String[] projection = {column};
        try {
            cursor = context.getContentResolver().query(uri, projection, selection, selectionArgs, null);
            if (cursor != null && cursor.moveToFirst()) {
                int index = cursor.getColumnIndexOrThrow(column);
                return cursor.getString(index);
            }
        } finally {
            if (cursor != null)
                cursor.close();
        }
        return null;
    }

    /**
     * @param uri The Uri to check.
     * @return Whether the Uri authority is ExternalStorageProvider.
     */
    public static boolean isExternalStorageDocument(Uri uri) {
        return "com.android.externalstorage.documents".equals(uri.getAuthority());
    }

    /**
     * @param uri The Uri to check.
     * @return Whether the Uri authority is DownloadsProvider.
     */
    public static boolean isDownloadsDocument(Uri uri) {
        return "com.android.providers.downloads.documents".equals(uri.getAuthority());
    }

    /**
     * @param uri The Uri to check.
     * @return Whether the Uri authority is MediaProvider.
     */
    public static boolean isMediaDocument(Uri uri) {
        return "com.android.providers.media.documents".equals(uri.getAuthority());
    }

    /**
     * @param uri The Uri to check.
     * @return Whether the Uri authority is Google Photos.
     */
    public static boolean isGooglePhotosUri(Uri uri) {
        return "com.google.android.apps.photos.content".equals(uri.getAuthority());
    }


    private Bitmap resizeImage_main(Bitmap originalBitmap, int newWidth, int newHeight) {
        int width = originalBitmap.getWidth();
        int height = originalBitmap.getHeight();
        //定义欲转换成的宽、高
//            int newWidth = 200;
//            int newHeight = 200;
        //计算宽、高缩放率
        float scanleWidth = (float) newWidth / width;
        float scanleHeight = (float) newHeight / height;
        //创建操作图片用的matrix对象 Matrix
        Matrix matrix = new Matrix();
        // 缩放图片动作
        matrix.postScale(scanleWidth, scanleHeight);
        //旋转图片 动作
        //matrix.postRotate(45);
        // 创建新的图片Bitmap
        Bitmap resizedBitmap = Bitmap.createBitmap(originalBitmap, 0, 0, width, height, matrix, true);
        return resizedBitmap;
    }










}

//class backTask extends AsyncTask<Cursor,Void,Void>{
//
//    Cursor cursor;
//
//    private LayoutInflater inflater;
//    private int layout_num;
//
//    @Override
//    protected Void doInBackground(Cursor... params) {
//        cursor=params[0];
//        String title = cursor.getString(cursor.getColumnIndex("name"));
//        String summary = cursor.getString(cursor.getColumnIndex("summary"));
//        String date = cursor.getString(cursor.getColumnIndex("date"));
//        String uri = cursor.getString(cursor.getColumnIndex("image"));
//        if(uri!=null){
//            Uri path=Uri.parse(uri);
//            String location=Adapter.getImageAbsolutePath(MainActivity.this, path);
//            System.out.println("此时的path是"+location);
//
////            Bitmap originalBitmap=BitmapFactory.decodeFile(String.valueOf(new File(location)));
////            Bitmap bmp=resizeImage_main(originalBitmap,90,90);
//            Bitmap bmp=decodeBitmap(location,400,400);
////            *
////             * 仍然还是会卡顿只是轻了一点
////
////
//
//        }
//
//
//
//        return null;
//    }
//
//    @Override
//    protected void onPreExecute() {
//        super.onPreExecute();
//
//
//
//    }
//}



